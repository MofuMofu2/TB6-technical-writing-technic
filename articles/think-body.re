= 本文を記述する

事前準備を終えた後は、実際に本文を書きます。この章では「手が止まらない」ようにするための心構えや工夫をお伝えします。
ただし、本文に書くべき内容については言及を避けます。同人誌は個人の趣味嗜好を表現する場だからです。
@<b>{好きなことを好きなように書く}のが大原則です。

== 最優先事項は書き終わること

本文を記載する上で重要なことは、@<b>{最初から綺麗な文章を書こうとしない}ことです。
最初からわかりやすい・読みやすい文章が書ける人はいません。
書いた文章をそのまま提出するわけではありません。納得いくまで修正すれば良いのです。

みなさんも、レポートの締め切り間際に焦った経験があるかと思います。
締め切り間際に原稿ができていないと、とにかく完成させることに気がむいてしまいますよね。
技術同人誌の質を上げるためには、締め切り間際に焦る事態は回避しなければなりません。

文章の修正には時間がかかります。また、時間があればより良い表現を再考できるかもしれません。
@<b>{早い段階で、本文を1度書ききることが重要です}。

私も技術同人誌を2年近く書いていますが、何回も書いては修正して…を繰り返した後に入稿しています。
繰り返しますが、最初に書いた文章＝入稿できるクオリティである必要はありません。
まずは目次を全て埋めることに注力しましょう。

== 大学生のためのレポートの書き方は参考になる

「何かを始める際には参考書や攻略方法を見たい」という方もいるでしょう。
この本を手に取った方の中には@<code>{具体的な書き進め方}を期待した方がいらっしゃるかもしれません。

@<b>{好きなことを好きなように書く}のが大原則なので「そんなものはない！」と言い切ることもできます。
しかし、参考にできるものがなくて手が止まってしまうと本末転倒です。
そこで、@<code>{技術同人誌の書き進め方}を参考にできる文献を紹介します。

技術同人誌は、特定の対象について知っている（調べた）知識をまとめて記述されたものと考えることができます。
プロダクトの紹介であっても、対象についてのまとめを記述するという点では同じです。
これは、大学のレポートと内容が似ています。

世の中には@<code>{レポートの書き方}本が多く出回っています。
技術同人誌の書き方が知りたいのであれば、@<b>{高校・大学生に向けたレポートの書き方本}を参考にすると良いでしょう。
これらの本は、次の事項が詳しく解説されています。

 * テーマの決め方
 * 論理展開の組み方
 * 参考文献の探し方・引用方法
 * 日本語文章の書き方（例：接続詞・句読点の打ち方）
 * Wordを用いたページ設定の方法
 * 自分の意見を思考する方法

学生向けだから、と敬遠するには勿体無い内容ばかりです。
欠点は電子版が少ないことです。図書館に置いてあることが多いので、まずは試し読みをしてみると良いでしょう。

=== 思考の整理学

 * 外山滋比古（1986）思考の整理学　筑摩書房
 ** http://www.chikumashobo.co.jp/product/9784480020475/

「東京大学の生協で7年連続No1ベストセラー」という売り文句が有名な書籍です。

本の中ではアイデアの出し方と寝かせ方、アイデアのストック方法が具体的に示されています。
技術同人誌を作り始める前、章の構想が固まるまでの段階で参考にすると良いでしょう。

この本がおすすめできる理由はもう1点あります。「自分の思考を育てる」ことを学べるからです。
同人誌界隈でよくある悩みの中に、「他の人とネタが被ってしまう」ことがあります。
ネタが被ってしまうと不安になる気持ちはよくわかります。
他の人の方がより良い同人誌を書けるはずだから、自分の本は不要なのかもしれない、と思うのです。

技術同人誌はあなたの思考結果をまとめて頒布するのであって、誰かのために書くものではありません。
同人誌を求める人は、本に詰まった思考結果が好きでやってくるのです。

思考の整理学では、「飛行機」として自分で自分の行く先を決めて飛び回ろう、そのために思考するのだとあります。
自分だけの思考を大切にすることへのエールに溢れている本です。

=== 論文・レポートの書き方

 * 石黒圭（2012）論文・レポートの基本
 * https://www.njg.co.jp/book/9784534049278/

論文を書き終えるために必要と思われる知識について、幅広く解説された本です。

文章の構成・文章の書き方についてわかりやすく書かれており、おすすめの一冊です。
引用文献の探し方、参考・引用方法について詳しく記述があるのも良い点です。

悪文と修正された文が本の中に記載されているため、文章のルールを理解しやすいです。
電子版も存在します。

似たような内容の本はいくつも出ていますので、好みの本を探すと良いでしょう。

=== 理科系の作文技術

 * 木下是雄（1981）理科系の作文技術　中央公論新社
 ** http://www.chuko.co.jp/shinsho/1981/09/100624.html

全編を通して、理科系の文章作成方法を指南した書籍です。
文章をなるべく短く、簡潔に書く方法が記述されています。

理科系の学問は、実験結果をまとめたレポート・論文を記述することが多いです。
実験結果を技術要素に置き換えて読み進めると良いでしょう。

先に紹介した『論文・レポートの書き方』に加えてもう一冊参考書が欲しい方におすすめです。

=== 記者ハンドブック

 * 共同通信社（2016）記者ハンドブック第13版
 ** https://www.kyodo.co.jp/books/isbn/978-4-7641-0687-1/

共同通信社が発行している本です。新聞上での日本語表現ルールを示した文書です。
日本語表現における公式ドキュメントという位置付けです。

送り仮名の表記法・かっこの使い方・カタカナ表記などのルールが詳しく載っています。
国名の表記法も載っています。面白いですね。

日本語の正確な表現を知りたいとき、参考にすると良いでしょう。

== 書き終わるための技術

本文は1度書き切ることが重要だ、と述べました。ここでは、私が原稿を書き終わるために工夫していることをお伝えします。
@<b>{原稿をサボらないことが一番難しいから}です。

=== 締め切りを見える化する

@<b>{書き始める前に締め切りを決め、カレンダーに書き込みましょう}。このとき、@<b>{印刷所の締め切りより1週間早め}に設定するのが重要です。
締め切りを早めに設定し、書かなきゃという焦りを生み出しましょう。焦らないと机に向かわないからです。

=== 監視されている状態を演出する

サボって締め切り間際に焦る人は、人の力を借りて机に向かう習慣をつけましょう。
自己管理ができないから締め切り間際に焦るのです。

 * Twitterで「〇〇について書きます」と宣言して固定ツイートにしておく
 * ブログに新刊の内容を書いておく
 * 身内に煽ってもらう

宣言してある内容の本が机に並んでいないと、本を求めてやってきた人はがっかりします。がっかりされると心苦しいですよね。
こうして退路を無くしておけば、机に向かわざるを得ないというわけです。

ちなみに一番効果的なのは@<code>{身内に煽ってもらう}です。同じ家の中に身内がいると、さらに効果的です。
せっかくなので、私が実際に煽られた内容を記載します。

//quote{
考えてもみてくださいよ、航空券いつ予約すんの？早割でしょう？（原稿も早割で入稿するでしょの意）
//}

//quote{
通常締切で入稿するのはスタートラインですよ
//}

//quote{
（締切間際に焦る筆者を見て）毎日やらないからそうやって焦るんでしょう？どうして毎日できないの？
//}

//quote{
俺がキュ○ぱずを毎日やるように、原稿も毎日やるべきでしょ
//}

適度な煽りは焦りを生みます。本物の人間に煽ってもらえるのであれば、関係性が壊れない程度にたくさん煽ってもらいましょう。

=== 毎日少しずつやる

塵も積もれば山となる、です。休日にまとめて原稿、はやめましょう。病気や急用が入った瞬間に破綻します。

未来をあてにするその根性がよろしくないのです。

== 執筆時のお困り事例とその解決法

これまで何回か「好きなことを好きなように書くべきだ」と述べてきました。ただ、この本は技術同人誌を書くための同人誌です。
そこで表現したくてもどう書けばいいかわからない、などというお困りごとの解決方法を示したいと思います。

困ったことがあれば、こんな書き方・解決例がありますよ、くらいの気持ちで参考にしてみてください。

=== 仲間の筆が遅い

複数人で同人誌を執筆する場合、一番困るパターンは「自分は原稿が書けたのに、仲間の原稿ができていない」ことです。
@<b>{喧嘩の元なので、全員いいから早くやれ}、ということが大前提です。ただ、これでは解決になりません。

私が複数人執筆の音頭を取っていたとき、とった対策をお伝えします。

==== 対処法A：締め切りを入稿日より3週間早く設定する

この対処法が利用できるのは、あなたが複数人執筆のリーダーをやっている場合のみです。これ以降、リーダーを@<code>{編集長}と表記します。

締め切りを早めに設定すると、@<b>{遅れても（あなたの）心理的に余裕がある}状態を保つことができます。
原稿が中々出てこないメンバーは、元から締め切りにルーズな人が多いです。わざと締め切りを早めに設定し、都度「あと〇〇日しかないよ」と煽りましょう。
このとき、あなたの原稿がすでに完成していると効果は抜群です。

わざと締めきりを早く設定しても、どうせ調べたら真の締め切りがばれるのでは？と思うかもしれません。
まず、締め切りにルーズな人は@<b>{わざわざ印刷所の締め切りを調べません}。
仮に真の締め切りがバレたとしても、「早割入稿を目指しているから」と言えば良いです。

印刷所の早割入稿日は、イベントの2週間前に設定されることが多いです。@<fn>{comikmarket}もちろん印刷所によりますので、都度しっかり確認して下さい。
ただ、早割で入稿できれば印刷費が2割近く安くなります。浮いたお金で打ち上げが豪華になるから、などと理由をつけて@<b>{早めに締め切りを設定しましょう}。

推敲・組版調整をする時間を考慮すると、通常締め切りの3週前を締め切りとするべきです。

//footnote[comikmarket][コミックマーケットは締め切りがイベント3・4週前になります。他にも大規模イベントに合わせる形だと特別対応になることもあります。]

==== 対処法B：圧力を強めにかける

とにかく圧力をかけて、無理矢理机に向かわせましょう。具体的には、次のような手法を使います。

 * 毎日進捗を聞いてまわる
 * あなたの原稿を早く完成させて公開する
 * ブログを先に書いて公開する
 * 執筆合宿をする

しつこく、毎日、地道に圧力をかけましょう。それでも締め切りにルーズな人は、ギリギリまで何もしないのですから。

==== 対処法C：最後の手段を発動する

これは最後の手段です。できれば対処法Bまでになるように努力しましょう。

最後の手段とは、@<b>{相手の原稿を切り捨てる＝自分の原稿だけで入稿できる状態にする/入稿する}です。
原稿が間に合わないのが悪いので、あなたに非はありません。ただし、大半の場合は人間関係も切り捨てることになりがちです。
できる限り回避するようにしましょう。

=== 書きたい内容がないよう

「内容がないようで困る」状態です。技術同人誌の内容を膨らませるためのアイデアを紹介します。

==== A. 比較する

取り扱おうとしている技術には、必ず@<code>{競合プロダクト}が存在するはずです。例を示します。

 * React vs Vue.js vs Angular
 * AWS vs GCP vs Azure vs オンプレミス

同じ目的を達成するためのプロダクトとはいえ、プロダクトごとに癖やメリット・デメリットは存在します。
比較対象となる技術を探し、良し悪しを比較することに価値があります。あなた自身は技術についての理解が深まります。
読者は技術選定に役立つ知見を得ることができます。

機能の比較をする際は、なるべく同じ目的を達成するコード・動作を行いましょう。同じものを作ることで、プロダクトの良し悪しが見えやすくなります。
エラーログなど、動作させてみないとわからないことも多いものです。

==== B. 歴史的背景を調べる

技術の出自や発展上の経緯を調べてみましょう。経緯を調べると、プロダクトの持つ思想や特徴を理解する助けになります。
調べたときに利用した資料名を載せれば、読者も同じ資料を閲覧できます。

技術の歴史的経緯は自力で調べるのが難しい知見です。プロダクトに対する理解がなければ、何を調べたら良いかすらわからないからです。
歴史的背景がまとまった本は、それだけでも価値があるのです。

=== 目次が出せない

「まず最初に目次を出せと言うけれど、結局どうやって出すんだよォーッ！」と感じている方もいらっしゃるかもしれません。
そこで、目次の作成方針をお伝えします。それは、@<code>{本の中で達成したい目的を決めてその作業順を洗い出す}ことです。

書こうとしている技術同人誌で達成したい目的を決め、そこに至るまでに必要な方法を全て書き出す方式です。

例えば、『ログと情報をレッツ・ラ・まぜまぜ！～ELK Stack で作るBI環境～』の目標は、@<code>{Kibanaを用いてTwilogというサービスのログを可視化する}ことでした。
目次を起こすときは、これに必要な手順を書き出します。大まかに分けて、次のような作業が発生すると考えました。

 * ミドルウェアの環境構築
 * Logstashを用いてデータをElaticsearchに連携する
 * Kibanaでデータを確認する
 * Kibanaでグラフを作成する

ELKの説明も必要でしょう。この時点で、このミドルウェアを利用した実績が少なかったためです。
そこで、ミドルウェアの環境構築前に@<code>{そもそもELKとは？}の説明を入れることにしました。

章の区切りができたので、今度は書く項目のなかで作業手順を整理します。@<code>{Kibanaでデータを確認する}章であれば、次のような流れになるだろう、と考えました。

 1. Kibanaの画面にアクセスする
 2. Kibanaのメニュー内容から「データを閲覧する」画面を開く
 3. 「データを閲覧する」画面でデータの内訳を参照する
 4. グラフに必要な検索条件を検討する

この工程を繰り返すことで、全ての章の目次を完成させます。

@<code>{本の中で達成したい目的を決めてその作業順を洗い出す}工程の良い点は、@<b>{目次を見るだけでその技術同人誌が何を実現するのかわかりやすくなる}ことです。
どんなことが書いてある本かわかりやすくなれば、対象読者により本を届けやすくなります。

技術同人誌の場合、イベントの短い立ち読み時間で本を購入するか判断しなければなりません。
あなたが立ち読みする側であれば、何が書いてあるかすぐわかった方が良いですよね。本のゴールが見えやすい方が、自分にとって必要かを判断しやすくなります。
結果、読んでほしい読者に本を届けやすくなるのです。

技術要素をオムニバス形式で並べる場合、@<b>{本全体で届けたい情報を目次に羅列し、その技術同人誌が伝えたい知見をはっきり}させると良いでしょう。
とはいえ、基本的な考え方はあまり変わりません。

=== なかなか書き出すことができない

原稿を書かないといけないのに、いざパソコンを開くと何も書けなくなってしまう。これは、本文作成時の中で一番の困りごとです。
何を書いていいのかわからない場合、目次出しの工程に戻ると良いでしょう。

目次が書けている場合、次の方法のどれかを試してみてください。

==== A. 章・節ごとに一番言いたいことを記載する

目次を書いて本全体の流れを作るのと同じように、各章・各節ごとに言いたいことを記載していきましょう。
一番言いたいことが目に見えれば、その主張に対する根拠・事前知識を補足する作業ができます。

何を書けば良いのかわからず手が止まってしまうときは、言いたいことがぼんやりとしている場合が多いです。
それを見える化してあげると、筆が進みやすくなります。

==== B. 一旦パソコンから離れる

何も思いつかないときは、パソコンを閉じてみましょう。長時間同じ姿勢を続けると疲れてしまいます。
少しその辺を散歩してみると、いいアイディアが思い浮かぶかもしれません。

私は、紙の上に本の内容を書き出した後でパソコンに向かうようにしています。
パソコンで最初から書こうとすると、エディタやワープロソフトの操作で頭がいっぱいになってしまうからです。
紙を見ながら文字を打ち込むことで、@<b>{考える時間と書く時間をずらす}ようにしています。

付箋やマインドマップアプリなどを活用して、@<b>{書くときに内容を考えないようにする}と短時間でも進捗を出しやすいです。

==== C. 割り切って思い切り遊ぶ

まったくやる気にならない場合、@<b>{時間を区切って好きなことをしましょう}。疲労が溜まっている人は、この時間で寝ましょう。

私の場合ですが、「あァ〜やりたくないけれど原稿やらなきゃだわ〜」と言いながら書いた原稿は@<b>{推敲時に90%捨てられてしまいます}。
気力に満ち溢れているときの文章と、書かされた感の強い文章では、前者の方が魅力的に映るのです。

締め切りに間に合っていれば良いのです。やる気がでないときは、割り切って思い切り遊びましょう。

=== できます地獄になってしまう

特定技術の機能を説明する際、@<code>{〇〇できます}という文言で表現する方法しか思いつかず困る、という例です。

//list[description-beats-can][機能の説明で「できます」を多用している例]{
Beatsはインストールすることで、機器のデータをElasticsearchやLogstashに転送できます。
例えばネットワークのパケット情報・Windowsのイベントログ・死活監視の情報などを収集することが
できるため、Logstashでカバーできないような情報を集めてくることができます。
//}

@<list>{description-beats-can}の文章でも、Beatsというプロダクトの機能は伝わります。
ただ、何度も@<code>{できます}が続くとしつこくなってしまいます。

==== A. 表現を変更する

@<code>{できます}・@<code>{可能です}と書かず、淡々と機能について紹介する方法です。

//list[description-beats][「できます」を使わずに機能を紹介する例です]{
Beatsは、機器のデータをElasticsearchやLogstashに転送する簡易的なデータ収集ツールです。
収集できるデータは、ネットワークのパケット情報・Windowsのイベントログ・死活監視の情報など様々です。
その中には、Logstashでは収集できない種別のデータもあります。
//}

@<list>{description-beats}では、@<code>{できます}という文言を最小限に抑えました。
そのプロダクト特有の機能のみ@<code>{できます}を利用し、それ以外は機能の特徴を並べるだけにします。

==== B. リストを使う

機能の特徴が複数ある場合、@<code>{リスト}記法を用いる方法もあります。リストは、同列の事柄をいくつも並べて示したいときに利用します。
@<list>{description-beats-can}をリスト化すると、次のようになります。

 * 機器のデータを収集する
 * ElasticsearchやLogstashにデータを収集する
 * ネットワークのパケット情報・Windowsのイベントログ・死活監視の情報などを収集する
 * Logstashでは収集できないデータもある

このように、リストを作ることで@<code>{できます}の多用を回避する手段もあります。
