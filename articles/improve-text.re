= 推敲してより良い原稿を作成する

原稿を一通り書き終わった後は、時間が許す限り推敲を行いましょう。推敲をコトバンクで検索すると、「詩文の字句や文章を十分に吟味して練りなおすこと」と出てきます（参考文献参照）。
技術同人誌に置ける推敲は、本文や載せるプログラム・図解を十分に吟味して練り直すこと、と言えるでしょう。

商業誌では、編集者があなたの代わりに推敲を行います。技術系の本の場合、編集者の推敲は日本語表現の修正のみで、技術的な観点でのレビューは外部にお願いする場合が多いようです。
ちなみに、技術的なレビューを外部の誰かに頼んでいる場合、本の著者欄に@<code>{監修}がクレジットされます。ここから、商業の技術書は多くの人が原稿をチェックしていることがわかります。

しかし、技術同人誌は基本的に編集者は存在しません。あなたが編集者の役割も兼ねているためです。もちろん、合同誌に寄稿する場合は編集担当の誰かに原稿を預けることになります。
ただ、原稿の中身をどのくらい確認してもらえるかはわかりません。編集担当の人がどのような方針を持っているかは、そのときになってみないとわかりません。

Twitterなどで呼びかけてレビューを頼めばいいじゃない、と思うかもしれません。ただし、人を集めることができるかは運次第です。加えて、あなたが望む形のレビューをくれるかはわかりません。
最終的な原稿の修正は、あなた自身で行う必要があります。

あなたは原稿を書くのでもう十分楽しんだので、早く入稿して解放されたいと思っているかもしれません。レビューを誰かに丸投げしたいと思っているかもしれません。しかし、それは絶対避けるべきです。
自分一人で推敲を行えるようになりましょう。

== 原稿の推敲はなぜ大切なのか？

=== 伝えたいことが伝わらなくなってしまうから

なぜ、推敲は大切なのでしょうか？

それは、@<b>{わかりやすい文章であればあるほど、あなたが広めたい技術を他人に伝えることができるから}です。推敲しても対して変わらないと思っていますか？では、次の文章を見てください。

//list[bad-kibana-text][文章例：1]{
データの内訳に応じて円が分かれていきます。 円を分ける条件を指定しないとデータの総件数が表示されるだけなので、パイを分割する設定を一緒に入れましょう。
//}

//list[good-kibana-text][文章例：2]{
円グラフを作成するための機能です。データの内訳を分析する用途で利用します。設定を変更すれば、円の中央が空いている”ドーナツ型”のグラフを作成することも可能です。
//}

この文章は、どちらも@<code>{Kibana}というミドルウェアの@<code>{Pie Chart}機能を説明したものです。

//image[kibana-graph][Kibanaの画面例]{

//}

画像の右上にドーナツ型の円がありますね。それがPie Chartのグラフです。この機能の詳細は、本題ではないため割愛します。

言葉の使い方・文章の並べ方・句読点の多さによって、伝わってくる内容が全く違う点が重要なのです。

例えば、@<list>{bad-kibana-text}を読んだとき「Pie Chartを使うと円グラフが描ける」という意味がすぐ伝わってきたでしょうか。
「データの内訳を分割する」・「パイを分割する」できそうだ、と受け取ったのではないかと思います。しかし、筆者が伝えたかったのは「Pie Chartを使うと円グラフが描ける」ことです。
パイの分割はその後のページで説明しているため、ここではさほど重要ではなかったのです。これでは読者が「著者の主張」を推測しながら本を読み進めることになります。

読者への負担が高い本は、読者にとって「読みにくい本」となってしまいます。はっきり言って、読後感の印象は最悪です。読むのに疲れるからです。
こうなると、あなたの伝えたいことは3割程度しか伝わりません。

=== 読者の読解力が問題なのか

読者の読解力・技術力が足りていないのが悪い。と思われるかもしれません。しかし、本当にそうでしょうか。

ここで『20歳の自分に受けさせたい文章講義 (星海社新書)』から、私が1番好きな文を引用します。@<fn>{seikai}

//footnote[seikai][新書なので電子版は存在しません。しかし、内容は一読する価値があります。本の感想や紹介はAmazonのカスタマーレビューを見てください。私は大学生のときにこの本に出会えて本当に良かった、と思っています。]

//quote{
専門書やマニア向けの雑誌などが（一般読者にとって）読みづらいのは、このためだ。出てくる言葉が難しいのではない。読者に甘え、本来やるべき説明を怠っているから、読みづらいのである。
//}

言いたいことが「伝わらない」のは読者のせいではありません。本を書いた人の責任である、と古賀さんは言います。さらに「専門性に逃げるのは、書き手の怠慢であり、甘えにすぎないのだ」とも述べています。

専門書の位置づけで技術同人誌を書くのであれば、「専門的な観点が多すぎて初心者に伝わらない」のは許されるかもしれません。
ただし、タイトルやキャッチコピーに@<code>{わかりやすい}や、@<code>{初心者の/はじめての}と書くのであれば話は別です。専門書よりも丁寧に、かつ慎重に原稿を書かなければなりません。

なぜならば、初心者はあなたの行間を読み取ることが難しいからです。前提知識が足りていないため、説明不足な点を自分で補うことができません。
そのため、行間の補足が必要な箇所が多くなると「読みづらい/わかりにくい」という感想を持ちやすいのです。サンプルコードが動作しなければ、もっと印象は悪くなります。

本当かなと思うのであれば、試しにAmazonのWebサイトで@<code>{Java 入門書}と検索してみてください。低評価のレビュー文の大半は「説明がわかりにくい」「サンプルコードが動作しない」といったものです。
ひどいものだと、中級者向けの本に「初心者が読んだけどわからなかった」というレビューがついていたりします。

対象読者をきちんと定め、誰が見てもわかるように明記する（誤解ないように宣伝する）のは本を作る人がやるべきことです。売れるから、刺さりやすいから、イイねがいっぱいもらえるからといって、安易に初心者向けを謳わない方が良いです。

読者というものは勝手なように見えるかもしれません。言いたい放題で理不尽なのは、よくわかります。
しかし、読者はあなたの書いた本からしか情報を取得できません。わからないことは調べて読んでほしい？行間を読んでほしい？技術書に対するAmazonのレビューをみれば、それは幻想だとわかるでしょう。
読者が本を買って読む目的は、次の2つに集約されます。

 * Web検索では手に入れられない情報を知ること
 * 横断的な情報をまとめて取得・管理すること

情報を手に入れる目的で本を読む人に、調べ物をしながら本を読むことを期待するのは難しいのです。対抗するためには、クオリティの高い原稿をぶつけるしかありません。

読者のためだけではなく、あなたの心を守るために推敲を行いましょう。

== 推敲する観点

普段の生活で推敲をすることはどのくらいありますか？メール文化の中にいれば、書いた文章を推敲する機会があるかもしれません。
Slackなど、チャットを多く利用するのであれば、長文を書くこと自体あまりないかもしれません。
そこで、推敲する観点をまずは押さえましょう。

=== 最低限やるべき観点

この観点が網羅されていない場合、「この本は読みにくい」印象となってしまいます。本の内容ではなく、文章の読みやすさに関わる観点だからです。@<br>{この観点の推敲は、一番最初に行いましょう。}

 * 語調・記法は統一されているか
 * 接続詞の用法は正しいか
 * 句読点の量と位置
 * 一文の長さは40文字以内か
 * 初見の単語には意味の解説があるか
 * 助詞の使い方は正しいか
 * 同じ言葉を繰り返し利用していないか

当たり前じゃないか、と思われるかもしれません。しかし、これらの観点が守られていない技術同人誌は数多く存在します。言い換えると、読みやすい文章を書くだけで1つ抜きん出た技術同人誌を作れるということです。

順番に内容を確認していきましょう。

===  語調・記法は統一されているか
===  接続詞の用法は正しいか
===  句読点の量と位置
===  一文の長さは40文字以内か
===  初見の単語には意味の解説があるか
===  助詞の使い方は正しいか
===  同じ言葉を繰り返し利用していないか


== まとめ

- 推敲は大事だよ
- 伝わらないと負けだよ

推敲に時間をかけるためにも、本文は早いとこ完成させましょうね！

== 参考文献

* コトバンク：推敲
** https://kotobank.jp/word/%E6%8E%A8%E6%95%B2-539689

* ２０歳の自分に受けさせたい文章講義（2012）古賀史健 星海社新書
** https://www.seikaisha.co.jp/information/2011/12/20-post-7 * html